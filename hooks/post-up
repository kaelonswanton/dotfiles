#!/bin/zsh

# Post-up script for after running `rcup`

touch "$HOME"/.psqlrc.local

# Set default branch to master
if [ -f "$HOME/.git_template/HEAD" ] && \
  [ "$(cat "$HOME/.git_template/HEAD")" = "ref: refs/heads/master" ]; then
  echo "Removing ~/.git_template/HEAD in favor of defaultBranch" >&2
  rm -f ~/.git_template/HEAD
fi

# detect old OS X broken /etc/zshenv and suggest rename
if grep -qw path_helper /etc/zshenv 2>/dev/null; then
  dir=$(CDPATH= cd -- "$(dirname -- "$0")" && pwd -P)

  cat <<MSG >&2
Warning: \`/etc/zshenv' configuration file on your system may cause unexpected
PATH changes on subsequent invocations of the zsh shell. The solution is to
rename the file to \`zprofile':
  sudo mv /etc/{zshenv,zprofile}

(called from ${dir}/post-up:${LINENO})

MSG
fi

# Function to check the operating system
get_os() {
  os_name=$(uname -s)
  case "$os_name" in
    Linux*)     echo "Linux";;
    Darwin*)    echo "macOS";;
    *)          echo "Unknown";;
  esac
}

os=$(get_os)
echo "Operating System: $os"

# Check if the OS variable is set correctly
if [[ -z "$os" ]]; then
  echo "Failed to determine the operating system."
  exit 1
fi

declare -A package_names
package_names=(
  [bat]="bat"
  [eza]="eza"
  [asdf]="asdf"
  [gh]="gh"
  [nvim]="neovim"
  [jq]="jq"
  [fzf]="fzf"
)

# Define OS-specific package mappings
declare -A macos_package_names
macos_package_names=(
)

declare -A linux_package_names
linux_package_names=(
)

# List of required commands
required_commands=("bat" "eza" "asdf" "gh" "nvim" "jq" "fzf")

# Function to check if a command exists
check_command() {
  command_name=$1
  package_name=${package_names[$command_name]:-$command_name}

    # Check for OS-specific package names
  if [[ "$os" == "macOS" ]]; then
    package_name=${macos_package_names[$command_name]:-$package_name}
  elif [[ "$os" == "Linux" ]]; then
    package_name=${linux_package_names[$command_name]:-$package_name}
  fi

  if ! command -v $command_name &> /dev/null; then
    if [[ "$os" == "macOS" ]]; then
      echo "Warning: $command_name is not installed. Please install it with \`brew install $package_name\`" >&2
    elif [[ "$os" == "Linux" ]]; then
      echo "Warning: $command_name is not installed. Please install it with \`paru -S $package_name\` or \`yay -S $package_name\`" >&2
    else
      echo "Warning: $command_name is not installed. Please install it" >&2
    fi
  fi
}

# Check each required command
echo "Checking for dependencies that need installing..."

for cmd in $required_commands; do
  check_command $cmd
done
