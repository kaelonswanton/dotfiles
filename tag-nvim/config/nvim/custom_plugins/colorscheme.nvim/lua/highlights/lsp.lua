local M = {}

function M.setup(colors)
  return {
    Statement = { fg = colors.purple },
    Constant = { fg = colors.orange },
    String = { fg = colors.green },
    Character = { link = "Constant" },
    Number = { link = "Constant" },
    Float = { link = "Number" },
    Boolean = { link = "Constant" },
    Exception = { fg = colors.red },
    Define = { fg = colors.purple },
    Delimiter = { fg = colors.magenta },
    Identifier = { link = "Normal" },
    Function = { fg = colors.blue },
    Method = { link = "Function" },
    PreProc = { link = "Identifier" },
    Type = { fg = colors.yellow },
    Typedef = { link = "Type" },
    Structure = { link = "Type" },
    Struct = { link = "Type" },
    Special = { fg = colors.cyan },
    SpecialChar = { fg = colors.purple },
    Error = { fg = colors.red },

    LspReferenceText = { link = "DiffText" },
    LspReferenceRead = { link = "LspReferenceText" },
    LspReferenceWrite = { link = "LspReferenceText" },
    LspInlayHint = { link = "NonText" },
    DiagnosticError = { fg = colors.red },
    DiagnosticWarn = { fg = colors.yellow },
    DiagnosticInfo = { fg = colors.blue },
    DiagnosticHint = { fg = colors.purple },
    DiagnosticOk = { fg = colors.green },
    DiagnosticFloatError = { link = "DiagnosticError" },
    DiagnosticFloatWarn = { link = "DiagnosticWarn" },
    DiagnosticFloatInfo = { link = "DiagnosticInfo" },
    DiagnosticFloatHint = { link = "DiagnosticHint" },
    DiagnosticFloatOk = { link = "DiagnosticOk" },
    DiagnosticSignError = { fg = colors.red, bg = colors.background },
    DiagnosticSignWarn = { fg = colors.yellow, bg = colors.background },
    DiagnosticSignInfo = { fg = colors.blue, bg = colors.background },
    DiagnosticSignHint = { fg = colors.purple, bg = colors.background },
    DiagnosticSignOk = { fg = colors.green, bg = colors.background },
    DiagnosticUnderlineError = { sp = colors.red, undercurl = true },
    DiagnosticUnderlineWarn = { sp = colors.yellow, undercurl = true },
    DiagnosticUnderlineInfo = { sp = colors.blue, undercurl = true },
    DiagnosticUnderlineHint = { sp = colors.purple, undercurl = true },
    DiagnosticUnderlineOk = { sp = colors.green, undercurl = true },
    LspSignatureActiveParameter = { fg = colors.yellow },
    LspCodeLens = { fg = colors.light_gray, italic = true },

    ["@string.special"] = { link = "Statement" },
    ["@variable"] = { link = "Identifier" },
    ["@lsp.type.variable"] = { fg = colors.lighter_gray },
    ["@lsp.mod.defaultLibrary"] = { link = "Special" },
    ["@lsp.mod.deprecated"] = { fg = colors.red, strikethrough = true },
    ["@keyword.return"] = { fg = colors.red },
    ["@text.strong"] = { bold = true },
    ["@text.emphasis"] = { italic = true },
    ["@text.underline"] = { underline = true },
    ["@text.strike"] = { strikethrough = true },
    ["@lsp.type.macro"] = { link = "Macro" },
    ["@markup.strong"] = { bold = true },
    ["@markup.italic"] = { italic = true },
    ["@markup.underline"] = { underline = true },
    ["@markup.strike"] = { strikethrough = true },
    ["@markup.link"] = { fg = colors.blue, underline = true },
    ["@markup.heading"] = { fg = colors.yellow, bold = true },
    ["@markup.quote"] = { fg = colors.light_gray, italic = true },
    ["@markup.list"] = { fg = colors.light_gray },
    ["@markup.list.item"] = { fg = colors.light_gray },
    ["@lsp.type.property"] = { link = "Identifier" },
    ["@lsp.type.enumMember"] = { link = "Constant" },
  }
end

return M
